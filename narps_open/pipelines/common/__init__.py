#!/usr/bin/python
# coding: utf-8

""" Define common features to pipelines. """

def remove_gunzip_files(_, subject_id, working_dir):
    """
    This method can be used in a Function node to fully remove
    the files generated by a gunzip node, once they aren't needed anymore.

    Parameters:
    - _: Node input only used for triggering the Node
    - subject_id: str, TODO
    - working_id: str, TODO
    """
    from shutil import rmtree
    from os.path import join

    try:
        rmtree(join(working_dir, 'l1_analysis', f'_subject_id_{subject_id}', 'gunzip_func'))
    except OSError as error:
        print(error)
    else:
        print('The directory is deleted successfully')

def remove_smoothed_files(_, subject_id, working_dir):
    """
    This method can be used in a Function node to fully remove
    the files generated by a smoothing node, once they aren't needed anymore.

    Parameters:
    - _: Node input only used for triggering the Node
    - subject_id: str, TODO
    - working_id: str, TODO
    """
    from shutil import rmtree
    from os.path import join

    try:
        rmtree(join(working_dir, 'l1_analysis', f'_subject_id_{subject_id}', 'smooth'))
    except OSError as error:
        print(error)
    else:
        print('The directory is deleted successfully')

def get_parameters_file(filepaths, subject_id, working_dir):
    """
        Create new tsv files with only desired parameters per subject per run.

        Arguments :
        - filepaths : list of str, paths to subject parameter files (i.e. one per run)
        - subject_id : str, subject for whom the 1st level analysis is made
        - parameters : list, 

        Return :
        - parameters_file : paths to new files containing only desired parameters.
    """
    from os import mkdir
    from os.path import join, isdir

    import pandas as pd
    import numpy as np

    # Handle the case where filepaths is a single path (str)
    if not isinstance(filepaths, list):
        filepaths = [filepaths]

    # Create the parameters files
    parameters_file = []
    for file_id, file in enumerate(filepaths):
        data_frame = pd.read_csv(file, sep = '\t', header=0)

        # Extract parameters we want to use for the model
        temp_list = []
        for parameter in parameters:
            temp_list.append(data_frame[parameter])
        retained_parameters = pd.DataFrame(np.transpose(np.array(temp_list)))

        # Write parameters to a parameters file
        # TODO : warning !!! filepaths must be ordered (1,2,3,4) for the following code to work
        new_path = join(working_dir, 'parameters_file',
            f'parameters_file_sub-{subject_id}_run-{str(file_id + 1).zfill(2)}.tsv')

        if not isdir(join(working_dir, 'parameters_file')):
            mkdir(join(working_dir, 'parameters_file'))

        with open(new_path, 'w') as writer:
            writer.write(retained_parameters.to_csv(
                sep = '\t', index = False, header = False, na_rep = '0.0'))

        parameters_file.append(new_path)

    return parameters_file
